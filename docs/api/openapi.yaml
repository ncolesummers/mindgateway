openapi: 3.0.0
info:
  title: MindGateway API
  description: |
    MindGateway API provides a unified interface for interacting with LLM models.
    This API is compatible with OpenAI's API format.
  version: 1.0.0
  contact:
    name: MindGateway Team
    url: https://github.com/company/mindgateway
servers:
  - url: https://api.mindgateway.example.com
    description: Production server
  - url: http://localhost:8080
    description: Local development server

security:
  - BearerAuth: []

tags:
  - name: Chat
    description: Chat completion endpoints
  - name: Completions
    description: Text completion endpoints
  - name: Embeddings
    description: Embedding generation endpoints
  - name: Models
    description: Model management endpoints
  - name: Health
    description: Health check endpoints

paths:
  /v1/chat/completions:
    post:
      summary: Create a chat completion
      description: Creates a completion for the chat message
      operationId: createChatCompletion
      tags:
        - Chat
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatCompletionRequest'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatCompletionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /v1/completions:
    post:
      summary: Create a completion
      description: Creates a completion for the provided prompt
      operationId: createCompletion
      tags:
        - Completions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompletionRequest'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompletionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /v1/embeddings:
    post:
      summary: Create embeddings
      description: Creates embeddings for the input text
      operationId: createEmbeddings
      tags:
        - Embeddings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmbeddingRequest'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbeddingResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /v1/models:
    get:
      summary: List models
      description: Lists the currently available models
      operationId: listModels
      tags:
        - Models
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelsResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

  /health:
    get:
      summary: Health check
      description: Returns the health status of the API
      operationId: healthCheck
      tags:
        - Health
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
        '500':
          $ref: '#/components/responses/ServerError'

  /ready:
    get:
      summary: Readiness check
      description: Returns the readiness status of the API and its dependencies
      operationId: readyCheck
      tags:
        - Health
      security: []
      responses:
        '200':
          description: Service is ready
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ready
                  checks:
                    type: object
                    additionalProperties:
                      type: string
                    example:
                      database: ok
                      redis: ok
                      etcd: ok
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          description: Service is not ready
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: not ready
                  checks:
                    type: object
                    additionalProperties:
                      type: string
                    example:
                      database: ok
                      redis: error
                      etcd: ok

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

  schemas:
    ChatCompletionRequest:
      type: object
      required:
        - model
        - messages
      properties:
        model:
          type: string
          description: ID of the model to use
          example: gpt-3.5-turbo
        messages:
          type: array
          description: A list of messages in the conversation
          items:
            $ref: '#/components/schemas/ChatMessage'
        temperature:
          type: number
          format: float
          minimum: 0
          maximum: 2
          description: Sampling temperature
          default: 1
          example: 0.7
        top_p:
          type: number
          format: float
          minimum: 0
          maximum: 1
          description: Nucleus sampling parameter
          default: 1
          example: 1
        n:
          type: integer
          minimum: 1
          maximum: 10
          description: Number of completions to generate
          default: 1
          example: 1
        stream:
          type: boolean
          description: Whether to stream the response
          default: false
          example: false
        stop:
          type: array
          description: Sequences where the API will stop generating
          items:
            type: string
          example: ["\n"]
        max_tokens:
          type: integer
          minimum: 1
          description: Maximum number of tokens to generate
          example: 100
        presence_penalty:
          type: number
          format: float
          minimum: -2
          maximum: 2
          description: Presence penalty for token selection
          default: 0
          example: 0
        frequency_penalty:
          type: number
          format: float
          minimum: -2
          maximum: 2
          description: Frequency penalty for token selection
          default: 0
          example: 0
        user:
          type: string
          description: Unique identifier for the end-user
          example: user-123

    ChatMessage:
      type: object
      required:
        - role
        - content
      properties:
        role:
          type: string
          description: The role of the message author
          enum: [system, user, assistant, function]
          example: user
        content:
          type: string
          description: The content of the message
          example: Hello, how are you?
        name:
          type: string
          description: The name of the author of this message
          example: john

    ChatCompletionResponse:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the completion
          example: chatcmpl-123
        object:
          type: string
          description: Object type
          example: chat.completion
        created:
          type: integer
          description: Unix timestamp of when the completion was created
          example: 1677858242
        model:
          type: string
          description: The model used for the completion
          example: gpt-3.5-turbo
        choices:
          type: array
          description: The completion choices
          items:
            $ref: '#/components/schemas/ChatCompletionChoice'
        usage:
          $ref: '#/components/schemas/Usage'

    ChatCompletionChoice:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ChatMessage'
        finish_reason:
          type: string
          description: The reason the model stopped generating
          enum: [stop, length, content_filter, null]
          example: stop
        index:
          type: integer
          description: The index of the choice
          example: 0

    CompletionRequest:
      type: object
      required:
        - model
        - prompt
      properties:
        model:
          type: string
          description: ID of the model to use
          example: text-davinci-003
        prompt:
          type: string
          description: The prompt to generate completions for
          example: Once upon a time
        temperature:
          type: number
          format: float
          minimum: 0
          maximum: 2
          description: Sampling temperature
          default: 1
          example: 0.7
        top_p:
          type: number
          format: float
          minimum: 0
          maximum: 1
          description: Nucleus sampling parameter
          default: 1
          example: 1
        n:
          type: integer
          minimum: 1
          maximum: 10
          description: Number of completions to generate
          default: 1
          example: 1
        stream:
          type: boolean
          description: Whether to stream the response
          default: false
          example: false
        stop:
          type: array
          description: Sequences where the API will stop generating
          items:
            type: string
          example: ["\n"]
        max_tokens:
          type: integer
          minimum: 1
          description: Maximum number of tokens to generate
          example: 100
        presence_penalty:
          type: number
          format: float
          minimum: -2
          maximum: 2
          description: Presence penalty for token selection
          default: 0
          example: 0
        frequency_penalty:
          type: number
          format: float
          minimum: -2
          maximum: 2
          description: Frequency penalty for token selection
          default: 0
          example: 0
        user:
          type: string
          description: Unique identifier for the end-user
          example: user-123

    CompletionResponse:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the completion
          example: cmpl-123
        object:
          type: string
          description: Object type
          example: text_completion
        created:
          type: integer
          description: Unix timestamp of when the completion was created
          example: 1677858242
        model:
          type: string
          description: The model used for the completion
          example: text-davinci-003
        choices:
          type: array
          description: The completion choices
          items:
            $ref: '#/components/schemas/CompletionChoice'
        usage:
          $ref: '#/components/schemas/Usage'

    CompletionChoice:
      type: object
      properties:
        text:
          type: string
          description: The generated text
          example: " in a land far, far away"
        finish_reason:
          type: string
          description: The reason the model stopped generating
          enum: [stop, length, content_filter, null]
          example: stop
        index:
          type: integer
          description: The index of the choice
          example: 0

    EmbeddingRequest:
      type: object
      required:
        - model
        - input
      properties:
        model:
          type: string
          description: ID of the model to use
          example: text-embedding-ada-002
        input:
          type: array
          description: Input text to embed
          items:
            type: string
          example: ["The food was delicious and the service was excellent."]
        user:
          type: string
          description: Unique identifier for the end-user
          example: user-123

    EmbeddingResponse:
      type: object
      properties:
        object:
          type: string
          description: Object type
          example: list
        data:
          type: array
          description: The embeddings
          items:
            $ref: '#/components/schemas/Embedding'
        model:
          type: string
          description: The model used for the embeddings
          example: text-embedding-ada-002
        usage:
          $ref: '#/components/schemas/Usage'

    Embedding:
      type: object
      properties:
        object:
          type: string
          description: Object type
          example: embedding
        embedding:
          type: array
          description: The embedding vector
          items:
            type: number
            format: float
          example: [0.0023064255, -0.009327292, ...]
        index:
          type: integer
          description: The index of the embedding
          example: 0

    ModelsResponse:
      type: object
      properties:
        object:
          type: string
          description: Object type
          example: list
        data:
          type: array
          description: The models
          items:
            $ref: '#/components/schemas/Model'

    Model:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the model
          example: gpt-3.5-turbo
        object:
          type: string
          description: Object type
          example: model
        created:
          type: integer
          description: Unix timestamp of when the model was created
          example: 1677858242
        owned_by:
          type: string
          description: The organization that owns the model
          example: openai

    Usage:
      type: object
      properties:
        prompt_tokens:
          type: integer
          description: Number of tokens in the prompt
          example: 10
        completion_tokens:
          type: integer
          description: Number of tokens in the completion
          example: 20
        total_tokens:
          type: integer
          description: Total number of tokens used
          example: 30

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: Invalid request parameters